import _ from 'lodash'

const genDiff = (obj1, obj2) => {
  const allKeys = _.union(Object.keys(obj1), Object.keys(obj2))
  const sortedKeys = _.sortBy(allKeys)

  return sortedKeys.flatMap(key => {
    // Recursion for nested objects
    if (_.isPlainObject(obj1[key]) && _.isPlainObject(obj2[key])) {
      return {
        key,
        type: 'nested',
        children: genDiff(obj1[key], obj2[key]), // üîÅ
      }
    }

    // Deleted keys
    if (!_.has(obj2, key)) {
      return { key, type: 'deleted', value: obj1[key] }
    }

    // Added keys
    if (!_.has(obj1, key)) {
      return { key, type: 'added', value: obj2[key] }
    }

    // Changed keys
    if (!_.isEqual(obj1[key], obj2[key])) {
      return {
        key,
        type: 'changed',
        oldValue: obj1[key],
        newValue: obj2[key],
      }
    }

    // –ù–µ–∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏
    return { key, type: 'unchanged', value: obj1[key] }
  })
}

export default genDiff
